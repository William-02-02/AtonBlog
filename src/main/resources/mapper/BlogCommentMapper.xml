<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lyh.AtonBlog.dao.BlogCommentMapper">

    <resultMap id="BaseResultMap" type="com.lyh.AtonBlog.pojo.BlogComment">
            <id property="commentId" column="comment_id" jdbcType="BIGINT"/>
            <result property="blogId" column="blog_id" jdbcType="BIGINT"/>
            <result property="commentator" column="commentator" jdbcType="VARCHAR"/>
            <result property="email" column="email" jdbcType="VARCHAR"/>
            <result property="websiteUrl" column="website_url" jdbcType="VARCHAR"/>
            <result property="commentBody" column="comment_body" jdbcType="VARCHAR"/>
            <result property="commentCreateTime" column="comment_create_time" jdbcType="TIMESTAMP"/>
            <result property="commentatorIp" column="commentator_ip" jdbcType="VARCHAR"/>
            <result property="replyBody" column="reply_body" jdbcType="VARCHAR"/>
            <result property="replyCreateTime" column="reply_create_time" jdbcType="TIMESTAMP"/>
            <result property="commentStatus" column="comment_status" jdbcType="TINYINT"/>
            <result property="isDeleted" column="is_deleted" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        comment_id,blog_id,commentator,
        email,website_url,comment_body,
        comment_create_time,commentator_ip,reply_body,
        reply_create_time,comment_status,is_deleted
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from tb_blog_comment
        where  comment_id = #{commentId,jdbcType=BIGINT} 
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from tb_blog_comment
        where  comment_id = #{commentId,jdbcType=BIGINT} 
    </delete>
    <delete id="deleteBatch">
        delete from tb_blog_comment
        where  comment_id in
            <foreach collection="array" item="commentId" open="(" separator="," close=")">
                #{commentId,jdbcType=BIGINT} 
            </foreach>
             
    </delete>
    
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.lyh.AtonBlog.pojo.BlogComment" useGeneratedKeys="true">
        insert into tb_blog_comment
        ( comment_id,blog_id,commentator
        ,email,website_url,comment_body
        ,comment_create_time,commentator_ip,reply_body
        ,reply_create_time,comment_status,is_deleted
        )
        values (#{commentId,jdbcType=BIGINT},#{blogId,jdbcType=BIGINT},#{commentator,jdbcType=VARCHAR}
        ,#{email,jdbcType=VARCHAR},#{websiteUrl,jdbcType=VARCHAR},#{commentBody,jdbcType=VARCHAR}
        ,#{commentCreateTime,jdbcType=TIMESTAMP},#{commentatorIp,jdbcType=VARCHAR},#{replyBody,jdbcType=VARCHAR}
        ,#{replyCreateTime,jdbcType=TIMESTAMP},#{commentStatus,jdbcType=TINYINT},#{isDeleted,jdbcType=TINYINT}
        )
    </insert>
    <insert id="insertSelective" keyColumn="comment_Id" keyProperty="commentId" parameterType="com.lyh.AtonBlog.pojo.BlogComment" useGeneratedKeys="true">
        insert into tb_blog_comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="commentId != null">comment_id,</if>
                <if test="blogId != null">blog_id,</if>
                <if test="commentator != null">commentator,</if>
                <if test="email != null">email,</if>
                <if test="websiteUrl != null">website_url,</if>
                <if test="commentBody != null">comment_body,</if>
                <if test="commentCreateTime != null">comment_create_time,</if>
                <if test="commentatorIp != null">commentator_ip,</if>
                <if test="replyBody != null">reply_body,</if>
                <if test="replyCreateTime != null">reply_create_time,</if>
                <if test="commentStatus != null">comment_status,</if>
                <if test="isDeleted != null">is_deleted,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="commentId != null"> #{commentId,jdbcType=BIGINT},</if>
                <if test="blogId != null"> #{blogId,jdbcType=BIGINT},</if>
                <if test="commentator != null"> #{commentator,jdbcType=VARCHAR},</if>
                <if test="email != null"> #{email,jdbcType=VARCHAR},</if>
                <if test="websiteUrl != null"> #{websiteUrl,jdbcType=VARCHAR},</if>
                <if test="commentBody != null"> #{commentBody,jdbcType=VARCHAR},</if>
                <if test="commentCreateTime != null"> #{commentCreateTime,jdbcType=TIMESTAMP},</if>
                <if test="commentatorIp != null"> #{commentatorIp,jdbcType=VARCHAR},</if>
                <if test="replyBody != null"> #{replyBody,jdbcType=VARCHAR},</if>
                <if test="replyCreateTime != null"> #{replyCreateTime,jdbcType=TIMESTAMP},</if>
                <if test="commentStatus != null"> #{commentStatus,jdbcType=TINYINT},</if>
                <if test="isDeleted != null"> #{isDeleted,jdbcType=TINYINT},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.lyh.AtonBlog.pojo.BlogComment">
        update tb_blog_comment
        <set>
                <if test="blogId != null">
                    blog_id = #{blogId,jdbcType=BIGINT},
                </if>
                <if test="commentator != null">
                    commentator = #{commentator,jdbcType=VARCHAR},
                </if>
                <if test="email != null">
                    email = #{email,jdbcType=VARCHAR},
                </if>
                <if test="websiteUrl != null">
                    website_url = #{websiteUrl,jdbcType=VARCHAR},
                </if>
                <if test="commentBody != null">
                    comment_body = #{commentBody,jdbcType=VARCHAR},
                </if>
                <if test="commentCreateTime != null">
                    comment_create_time = #{commentCreateTime,jdbcType=TIMESTAMP},
                </if>
                <if test="commentatorIp != null">
                    commentator_ip = #{commentatorIp,jdbcType=VARCHAR},
                </if>
                <if test="replyBody != null">
                    reply_body = #{replyBody,jdbcType=VARCHAR},
                </if>
                <if test="replyCreateTime != null">
                    reply_create_time = #{replyCreateTime,jdbcType=TIMESTAMP},
                </if>
                <if test="commentStatus != null">
                    comment_status = #{commentStatus,jdbcType=TINYINT},
                </if>
                <if test="isDeleted != null">
                    is_deleted = #{isDeleted,jdbcType=TINYINT},
                </if>
        </set>
        where   comment_id = #{commentId,jdbcType=BIGINT} 
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lyh.AtonBlog.pojo.BlogComment">
        update tb_blog_comment
        set 
            blog_id =  #{blogId,jdbcType=BIGINT},
            commentator =  #{commentator,jdbcType=VARCHAR},
            email =  #{email,jdbcType=VARCHAR},
            website_url =  #{websiteUrl,jdbcType=VARCHAR},
            comment_body =  #{commentBody,jdbcType=VARCHAR},
            comment_create_time =  #{commentCreateTime,jdbcType=TIMESTAMP},
            commentator_ip =  #{commentatorIp,jdbcType=VARCHAR},
            reply_body =  #{replyBody,jdbcType=VARCHAR},
            reply_create_time =  #{replyCreateTime,jdbcType=TIMESTAMP},
            comment_status =  #{commentStatus,jdbcType=TINYINT},
            is_deleted =  #{isDeleted,jdbcType=TINYINT}
        where   comment_id = #{commentId,jdbcType=BIGINT} 
    </update>
    <select id="selectAllByMap" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from tb_blog_comment
        where is_deleted = 0
        <if test="keyword != null">
            and comment_id in
            (select comment_id from tb_link where
            comment_body like CONCAT('%',#{keyword},'%')
            or commentator like CONCAT('%',#{keyword},'%')
            or email like CONCAT('%',#{keyword},'%'))
        </if>
        order by comment_status asc,comment_create_time asc
        <if test="start != null and pageVolume != null">
            limit #{start},#{pageVolume}
        </if>
    </select>
    <update id="updateCommentStatusByCommentId" >
        update tb_blog_comment
        set comment_status = #{commentStatus}
        where comment_id in
        <foreach collection="commentIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
          AND is_deleted = 0;
    </update>
    <select id="countComment" parameterType="map" resultType="int">
        select count(*)
        from tb_blog_comment
        where is_deleted = 0
        <if test="keyword != null">
            and comment_body like concat('%',#{keyword},'%')
        </if>

    </select>
    <select id="countByBlogId" resultType="int">
        select count(*)
        from tb_blog_comment
        where blog_id = #{blogId,jdbcType=NUMERIC}
        and comment_status = 1
    </select>
    <select id="selectByBlogId" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_blog_comment
        where is_deleted=0
        <if test="blogId != null">
            AND blog_id = #{blogId}
        </if>
        <if test="commentStatus != null">
            AND comment_status = #{commentStatus}
        </if>
        order by comment_id desc
        <if test="start != null and pageVolume != null">
            limit #{start},#{pageVolume}
        </if>

    </select>
</mapper>
